# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sceneCapture_pb2 as sceneCapture__pb2


class SceneCaptureServiceStub(object):
    """Visual Input Node Service 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializeSceneCapture = channel.unary_unary(
                '/sceneCapture.SceneCaptureService/InitializeSceneCapture',
                request_serializer=sceneCapture__pb2.InitializeSceneCaptureRequest.SerializeToString,
                response_deserializer=sceneCapture__pb2.InitializeSceneCaptureResponse.FromString,
                )
        self.RunCapture = channel.unary_stream(
                '/sceneCapture.SceneCaptureService/RunCapture',
                request_serializer=sceneCapture__pb2.RunCaptureRequest.SerializeToString,
                response_deserializer=sceneCapture__pb2.RunCaptureResponse.FromString,
                )
        self.StopCapture = channel.unary_unary(
                '/sceneCapture.SceneCaptureService/StopCapture',
                request_serializer=sceneCapture__pb2.StopCaptureRequest.SerializeToString,
                response_deserializer=sceneCapture__pb2.StopCaptureResponse.FromString,
                )


class SceneCaptureServiceServicer(object):
    """Visual Input Node Service 

    """

    def InitializeSceneCapture(self, request, context):
        """<------------------- Initialization -------------------------------->
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCapture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopCapture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SceneCaptureServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializeSceneCapture': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeSceneCapture,
                    request_deserializer=sceneCapture__pb2.InitializeSceneCaptureRequest.FromString,
                    response_serializer=sceneCapture__pb2.InitializeSceneCaptureResponse.SerializeToString,
            ),
            'RunCapture': grpc.unary_stream_rpc_method_handler(
                    servicer.RunCapture,
                    request_deserializer=sceneCapture__pb2.RunCaptureRequest.FromString,
                    response_serializer=sceneCapture__pb2.RunCaptureResponse.SerializeToString,
            ),
            'StopCapture': grpc.unary_unary_rpc_method_handler(
                    servicer.StopCapture,
                    request_deserializer=sceneCapture__pb2.StopCaptureRequest.FromString,
                    response_serializer=sceneCapture__pb2.StopCaptureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sceneCapture.SceneCaptureService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SceneCaptureService(object):
    """Visual Input Node Service 

    """

    @staticmethod
    def InitializeSceneCapture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sceneCapture.SceneCaptureService/InitializeSceneCapture',
            sceneCapture__pb2.InitializeSceneCaptureRequest.SerializeToString,
            sceneCapture__pb2.InitializeSceneCaptureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunCapture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sceneCapture.SceneCaptureService/RunCapture',
            sceneCapture__pb2.RunCaptureRequest.SerializeToString,
            sceneCapture__pb2.RunCaptureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopCapture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sceneCapture.SceneCaptureService/StopCapture',
            sceneCapture__pb2.StopCaptureRequest.SerializeToString,
            sceneCapture__pb2.StopCaptureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
