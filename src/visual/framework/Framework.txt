// import { Asset } from "visual/hooks/use-assets/types";
// import { initializeAssets } from "visual/hooks/use-assets/useAssets";
// import { InteractionEventObject } from "visual/hooks/use-interactions/types";
// import { ThreeJsParams } from "visual/hooks/use-three-js/types";

// interface Initialization {
//   threeJsInitialized: boolean;
//   assetsInitialized: boolean;
//   sceneInitialized: boolean;
// }

// const defaultInitializationObject = {
//   threeJsInitialized: false,
//   assetsInitialized: false,
//   sceneInitialized: false,
// };

// interface Thread {
//   isRunning: boolean;
// }

// const defaultThread = {
//   isRunning: false,
// };

// export class Framework {
//   initialization: Initialization;
//   thread: Thread;
//   threeJS: ThreeJsParams;
//   interactions: InteractionEventObject[];
//   assets: Asset[];
//   isLoadingAssets: boolean;
//   constructor() {
//     this.threeJS = {};
//     this.interactions = [];
//     this.initialization = defaultInitializationObject;
//     this.thread = defaultThread;
//     this.assets = [];
//     this.isLoadingAssets = false;
//   }

//   // Initialization
//   public isInitialized() {
//     return Object.values(this.initialization).every(
//       (value: boolean) => value === true
//     );
//   }

//   public setThreeJsInitialized() {
//     this.initialization.threeJsInitialized = true;
//   }

//   // THREAD
//   public isThreadRunning() {
//     return this.thread.isRunning;
//   }

//   public toggleThread() {
//     this.thread.isRunning = !this.thread.isRunning;
//   }
//   public startThread() {
//     this.thread.isRunning = true;
//   }
//   public stopThread() {
//     this.thread.isRunning = false;
//   }

//   public async loadAssets(assets: Asset[]) {
//     if (!this.isLoadingAssets) {
//       this.isLoadingAssets = true;
//       const loadedAssets = await initializeAssets(assets);
//       try {
//         // Not in love with this implementation - but need to continue developing
//         loadedAssets.forEach((asset, index) => {
//           console.log(index);
//           Promise.resolve(asset).then((value) => {
//             if (!!value) {
//               this.assets.push(value as Asset);
//               if (index === loadedAssets.length - 1) {
//                 this.initialization.assetsInitialized = true;
//               }
//             }
//           });
//         });
//       } catch {
//         console.log("error");
//       }
//     }
//   }

//   public getAssets() {
//     return this.assets;
//   }
// }
